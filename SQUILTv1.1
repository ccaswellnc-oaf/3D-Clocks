/***************************************************
  Program for displaying time and temp on a background
  of Quilt images made for Catherine and based on a lot
  of stolen code.
 ****************************************************/


#include <Adafruit_GFX.h>  // Core graphics library
#include "Adafruit_ST7796S_kbv.h"
#include <Fonts/FreeMonoBoldOblique12pt7b.h>
#include <Fonts/FreeMonoBold24pt7b.h>
#include <SPI.h>
#include <SD.h>
#include "WiFiS3.h"
#include <ezTime.h>
#include <ArduinoHttpClient.h>
#include <ArduinoJson.h>
#include <floatToString.h>

// TFT display and SD card will share the hardware SPI interface.
// Hardware SPI pins are specific to the Arduino board type and
// cannot be remapped to alternate pins.  For Arduino Uno,
// Duemilanove, etc., pin 11 = MOSI, pin 12 = MISO, pin 13 = SCK.

#define TFT_RST 8
#define TFT_DC 9
#define TFT_CS 10
#define SD_CS 4
#define TFT_WIDTH 480
#define TFT_HEIGHT 320

//Network Needs
#define WIFI_SSID "MYWIFI"
#define WIFI_PWD "MYWIFIPWD"
IPAddress ip;
IPAddress gateway;
String timeLocal;

//Needed for getting the weather data
//Need to register for a key with OpenWeatherMap
String serverAddress = "192.241.245.161";
String openWeatherMapApiKey = "";
//Choose your city; newer versions use LAT/LONG
String city = "New York";
String countryCode = "USA";
String serverPath = "/data/2.5/weather?q=" + city + "," + countryCode + "units=imperial&APPID=" + openWeatherMapApiKey;

//Use these for how often to update
time_t lastWeather = 0;
int wInterval = 3600;  // default to hourly
time_t lastBack = 0;
int bInterval = 900;  // default to 15 minutes
String lastMinute = "N";

//Setup WiFi
WiFiClient wifi;
HttpClient client = HttpClient(wifi, serverAddress, 80);
int status = WL_IDLE_STATUS;

// Create the Timezone class
Timezone myTZ;

// Use hardware SPI (on Uno, #13, #12, #11) and the above for CS/DC
Adafruit_ST7796S_kbv tft = Adafruit_ST7796S_kbv(TFT_CS, TFT_DC, TFT_RST);

// Get a list of the files and populate an array

int bmpCount = 0;
int lastIndex = 0;
File root;
String bmpList[50];

int i = 0;

String wData[2];  // Array to store strings
// Function to initialize the array of strings
void initializeStrings() {
  for (int i = 0; i < 2; i++) {
    wData[i] = "";  // Initialize each string as empty
  }
}

int countBMP() {

  root = SD.open("/");

  // Count the number of .bmp files and put then in an array

  while (true) {

    File entry = root.openNextFile();
    if (!entry) {
      // No more files
      break;
    }
    Serial.println(entry.name());
    if (entry.isDirectory()) {
      continue;
    }
    if (strstr(entry.name(), ".BMP")) {
      bmpCount++;
    }
    entry.close();
  }
  root.close();
  Serial.print("Number of Files found: ");
  Serial.println(bmpCount);
  return (bmpCount);
}


void listBMP(int Fcount) {
  // Open the root directory again to find the random .bmp file
  int BMPs = 0;

  root = SD.open("/");

  while (BMPs < Fcount) {
    File entry = root.openNextFile();
    if (!entry) {
      // No more files
      break;
    }
    if (entry.isDirectory()) {
      continue;
    }
    if (strstr(entry.name(), ".BMP")) {
      Serial.print("Filename ");
      //     Serial.println(entry.name());
      bmpList[BMPs] = entry.name();
      BMPs++;
    }
    entry.close();
  }
  root.close();
}


void setup(void) {
  initializeStrings();
  Serial.begin(9600);

  Serial.print("Initializing SD card...");
  if (!SD.begin(SD_CS)) {
    Serial.println("failed!");
  }
  Serial.println("OK!");

  bmpCount = countBMP();
  listBMP(bmpCount);

  Serial.println();
  Serial.println(__FILE__);

  tft.begin();

  tft.fillScreen(ST7796S_WHITE);
  


  //Get on the network
  connectToWiFi();
  waitForSync();

  // Set up the time


  myTZ.setLocation("America/New_York");
 
  setInterval(60);

  //  Serial.println();
  //   Serial.println("UTC:             " + UTC.dateTime());
  //  Serial.println("Set local time returned" + isLocal);

  Serial.print(F(__FILE__));
  Serial.print(" running at ");
  Serial.println(timeLocal);
}

void loop() {

  if (myTZ.dateTime("i") != lastMinute) {
    if (now() > lastWeather + wInterval) {
      Serial.println(lastWeather);
      Serial.println(now() + wInterval);
      Serial.print("Updating weather at :");
      Serial.println(myTZ.dateTime("g:i A"));
      getTemperature();
      //   Serial.print("Local Temperature:");
      //   Serial.println(wData[0]);
      //   Serial.print("Local Weather:");
      //   Serial.println(wData[1]);
      lastWeather = now();
    }

    if (now() > lastBack + bInterval) {
      Serial.print("Updating background at :");
      Serial.println(myTZ.dateTime("g:i A"));
      String bmpName;
      //bmpName = displayRandomBMP();
      // Generate a random number between 0 and bCount
      int randomIndex = getRandomIndex(lastIndex, bmpCount);
      Serial.print("RandomIndex is:");
      Serial.println(randomIndex);
      lastIndex = randomIndex;
      bmpName = bmpList[randomIndex];
      //Serial.print("Got filename:");
      //Serial.print(bmpName);

      bmpDraw(bmpName, 0, 0);

      lastBack = now();
    } else {
      float howLong = (now() - lastBack) / 60;
      float nextBack = (lastBack + bInterval - now()) / 60;
      //   Serial.print(now()-lastBack);
      //   Serial.println(" seconds since last background change");
      //   Serial.print(howLong);
      //   Serial.println(" minutes since last background change");
      //   Serial.print(nextBack);
      //   Serial.println(" minutes until next background change");
    }

    String clockStr = myTZ.dateTime("g:i");
    String AorP = myTZ.dateTime("A");
    String sDate = myTZ.dateTime("D, M j Y");

    weatherDraw(wData[0], wData[1], sDate);
    timeDraw(clockStr, AorP);
    lastMinute = myTZ.dateTime("i");
  }

  // delay(60000);
  events();
}

// Make sure we get a different image every time
int getRandomIndex(int lI, int bC) {
  int nextI = lI;
  while (nextI == lI) {
    nextI = random(0, bC);
  }
  return (nextI);
}


// TopLeft X, TopLeft Y, width, height color
void timeDraw(String cHour, String aMpM) {
int16_t x, y;
uint16_t textWidth, textHeight;
int bW = TFT_WIDTH * .75;
int bOff = (TFT_WIDTH - bW)/2;

  tft.setRotation(1);
  tft.setFont(&FreeMonoBold24pt7b);
  tft.fillRoundRect(bOff, 60, bW, 90, 6, ST7796S_YELLOW);
 
  tft.getTextBounds(cHour, 0, 0, &x, &y, &textWidth, &textHeight);
  int aOff = textWidth / 2;
  tft.setTextSize(2);
  tft.getTextBounds(cHour, 0, 0, &x, &y, &textWidth, &textHeight);
  // Calculate the starting X position for center justification
  int16_t xPos = (TFT_WIDTH - textWidth - aOff) / 2;

  // Display the text at the calculated position
  tft.setCursor(xPos, (TFT_HEIGHT - textHeight) / 2);
 
  tft.setTextColor(ST7796S_BLACK);
  tft.print(cHour);
  tft.setFont(&FreeMonoBoldOblique12pt7b);
  tft.setTextSize(1);
  tft.print(" ");
  
  tft.print(aMpM);
  tft.setRotation(0);
}



void weatherDraw(String cTmp, String cW, String cDte) {
int16_t x, y;
uint16_t textWidth, textHeight;
int bW = TFT_WIDTH * .85;
int bOff = (TFT_WIDTH - bW)/2;
String wString = cDte + " " + cTmp + "F " + cW;

  tft.setRotation(1);
  tft.fillRoundRect(bOff, 250, bW, 40, 6, ST7796S_YELLOW);
  tft.setFont(&FreeMonoBoldOblique12pt7b);
  tft.getTextBounds(wString, 0, 0, &x, &y, &textWidth, &textHeight);
  int tOff = (TFT_WIDTH - textWidth)/2;
  
  tft.setCursor(tOff, 275);
 // tft.setTextSize(2);
  tft.setTextColor(ST7796S_BLACK);
  tft.print(wString);
  //tft.print(" ");
  //tft.print(cTmp);
  //tft.setTextSize(1);
  //tft.print("o");
  //tft.setTextSize(2);
  //tft.print("F ");
  //tft.print(cW);
  tft.setRotation(0);
}

// This function opens a Windows Bitmap (BMP) file and
// displays it at the given coordinates.  It's sped up
// by reading many pixels worth of data at a time
// (rather than pixel by pixel).  Increasing the buffer
// size takes more of the Arduino's precious RAM but
// makes loading a little faster.  20 pixels seems a
// good balance.

#define BUFFPIXEL 20

//void bmpDraw(char *filename, uint8_t x, uint16_t y)

void bmpDraw(String filename, uint8_t x, uint16_t y) {

  File bmpFile;
  int bmpWidth, bmpHeight;             // W+H in pixels
  uint8_t bmpDepth;                    // Bit depth (currently must be 24)
  uint32_t bmpImageoffset;             // Start of image data in file
  uint32_t rowSize;                    // Not always = bmpWidth; may have padding
  uint8_t sdbuffer[3 * BUFFPIXEL];     // pixel buffer (R+G+B per pixel)
  uint8_t buffidx = sizeof(sdbuffer);  // Current position in sdbuffer
  boolean goodBmp = false;             // Set to true on valid header parse
  boolean flip = true;                 // BMP is stored bottom-to-top
  int w, h, row, col;
  uint8_t r, g, b;
  uint32_t pos = 0, startTime = millis();

  if ((x >= tft.width()) || (y >= tft.height())) return;

  // Serial.println();
  //Serial.print(F("Loading image '"));
  // Serial.print(filename);
  // Serial.println('\'');

  // Open requested file on SD card
  if ((bmpFile = SD.open(filename)) == NULL) {
    Serial.print(F("File not found"));
    return;
  }

  // Parse BMP header
  if (read16(bmpFile) == 0x4D42) {  // BMP signature
                                    //  Serial.print(F("File size: "));
    Serial.println(read32(bmpFile));
    (void)read32(bmpFile);             // Read & ignore creator bytes
    bmpImageoffset = read32(bmpFile);  // Start of image data
                                       // Serial.print(F("Image Offset: "));
                                       // Serial.println(bmpImageoffset, DEC);
    // Read DIB header
    // Serial.print(F("Header size: "));
    Serial.println(read32(bmpFile));
    bmpWidth = read32(bmpFile);
    bmpHeight = read32(bmpFile);
    if (read16(bmpFile) == 1) {                          // # planes -- must be '1'
      bmpDepth = read16(bmpFile);                        // bits per pixel
                                                         //   Serial.print(F("Bit Depth: "));
                                                         //   Serial.println(bmpDepth);
      if ((bmpDepth == 24) && (read32(bmpFile) == 0)) {  // 0 = uncompressed

        goodBmp = true;  // Supported BMP format -- proceed!
                         //     Serial.print(F("Image size: "));
                         //     Serial.print(bmpWidth);
                         //     Serial.print('x');
                         //     Serial.println(bmpHeight);

        // BMP rows are padded (if needed) to 4-byte boundary
        rowSize = (bmpWidth * 3 + 3) & ~3;
        //       Serial.print(F("row size: "));
        //       Serial.print(rowSize);

        // If bmpHeight is negative, image is in top-down order.
        // This is not canon but has been observed in the wild.
        if (bmpHeight < 0) {
          bmpHeight = -bmpHeight;
          flip = false;
          //         Serial.print(F("Flip Status: "));
          //        Serial.print(flip);
        }

        // Crop area to be loaded
        w = bmpWidth;
        h = bmpHeight;
        if ((x + w - 1) >= tft.width()) w = tft.width() - x;
        if ((y + h - 1) >= tft.height()) h = tft.height() - y;


        // Set TFT address window to clipped image bounds
        tft.startWrite();  // Start TFT transaction
        tft.setAddrWindow(x, y, w, h);

        for (row = 0; row < h; row++) {  // For each scanline...

          // Seek to start of scan line.  It might seem labor-
          // intensive to be doing this on every line, but this
          // method covers a lot of gritty details like cropping
          // and scanline padding.  Also, the seek only takes
          // place if the file position actually needs to change
          // (avoids a lot of cluster math in SD library).
          if (flip)  // Bitmap is stored bottom-to-top order (normal BMP)
            pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize;
          else  // Bitmap is stored top-to-bottom
            pos = bmpImageoffset + row * rowSize;


          if (bmpFile.position() != pos) {  // Need seek?
            tft.endWrite();                 // End TFT transaction
            bmpFile.seek(pos);
            buffidx = sizeof(sdbuffer);  // Force buffer reload
            tft.startWrite();            // Start new TFT transaction
          }

          for (col = 0; col < w; col++) {  // For each pixel...
            // Time to read more pixel data?
            if (buffidx >= sizeof(sdbuffer)) {  // Indeed
              tft.endWrite();                   // End TFT transaction
              bmpFile.read(sdbuffer, sizeof(sdbuffer));
              buffidx = 0;       // Set index to beginning
              tft.startWrite();  // Start new TFT transaction
            }

            // Convert pixel from BMP to TFT format, push to display
            b = sdbuffer[buffidx++];
            g = sdbuffer[buffidx++];
            r = sdbuffer[buffidx++];
            tft.pushColor(tft.color565(r, g, b));

          }              // end pixel
        }                // end scanline
        tft.endWrite();  // End last TFT transaction
                         //     Serial.print(F("Loaded in "));
                         //     Serial.print(millis() - startTime);
                         //     Serial.println(" ms");
      }                  // end goodBmp
    }
  }

  bmpFile.close();
  if (!goodBmp) Serial.println(F("BMP format not recognized."));
}

// These read 16- and 32-bit types from the SD card file.
// BMP data is stored little-endian, Arduino is little-endian too.
// May need to reverse subscript order if porting elsewhere.

uint16_t read16(File &f) {
  uint16_t result;
  ((uint8_t *)&result)[0] = f.read();  // LSB
  ((uint8_t *)&result)[1] = f.read();  // MSB
  return result;
}

uint32_t read32(File &f) {
  uint32_t result;
  ((uint8_t *)&result)[0] = f.read();  // LSB
  ((uint8_t *)&result)[1] = f.read();
  ((uint8_t *)&result)[2] = f.read();
  ((uint8_t *)&result)[3] = f.read();  // MSB
  return result;
}

void connectToWiFi() {
  Serial.println("Connecting to WiFi...");
  while (WiFi.begin(WIFI_SSID, WIFI_PWD) != WL_CONNECTED) {
    delay(1000);
    Serial.println("Retrying...");
  }
  Serial.println("WiFi Connected!");
  ip = WiFi.localIP();
  gateway = WiFi.gatewayIP();
  /* Serial.print("IP Address: ");
  Serial.println(ip);
  Serial.print("Gateway: ");
  Serial.println(gateway);
*/
}

void getTemperature() {
  // Function to get temperature from the specified source
  // Check WiFi connection status



  if (WiFi.status() == WL_CONNECTED) {

    Serial.println("Connecting to: " + serverAddress + serverPath);

    client.get(serverPath);


    int statusCode = client.responseStatusCode();
    client.skipResponseHeaders();
    String jsonBuffer = client.responseBody();

    Serial.print("Status code: ");
    Serial.println(statusCode);
    //Serial.print("json: ");
    //Serial.println(jsonBuffer);

    JsonDocument filter;
    filter["weather"][0]["main"] = true;
    filter["main"]["temp"] = true;

    // Allocate the JSON document
    JsonDocument doc;
    //deserializeJson(doc, jsonBuffer);
    deserializeJson(doc, jsonBuffer, DeserializationOption::Filter(filter));

    // serializeJsonPretty(doc, Serial);

    float temperature = doc["main"]["temp"];
    String Ftemperature = kelvinToFahrenheit(temperature);
    String weather = doc["weather"][0]["main"];
    wData[0] = Ftemperature;
    wData[1] = weather;

    /*Serial.print("Temperature is:");
    Serial.println(convTemp[0]);
    Serial.print("Weather is:");
    Serial.println(convTemp[1]);*/

    return;
  } else {
    Serial.println("WiFi Disconnected");
    return;
  }
}

String kelvinToFahrenheit(float kelvin) {
  char S[15];
  float kToc = (kelvin - 273.15) * 9.0 / 5.0 + 32.0;

  return (floatToString(kToc, S, sizeof(S), 0));
}
